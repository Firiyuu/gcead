/**
 * Copyright (C) 2009  Ellis Whitehead
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __IDACDRIVER4CONSTANTS_H
#define __IDACDRIVER4CONSTANTS_H

#include <QtGlobal>


// Board parameters
const int						IDAC_TRANSFER_INTERVAL	= 100;		// Maximum interval for transfer to caller process
const int						IDAC_LCM_MINIMUM		= 1000;		// Limit the data flow generated by sync words
const int						IDAC_MAX_DECIMATION		= 0x7FFF;	// Maximum allowable decimation
const int						IDAC_SHORTDELAY			= 1;		// Delay for generating a pulse etc
const int						IDAC_DELAY				= 10;		// Delay for accepting a command
const int						IDAC_LONGDELAY			= 100;		// Delay for initialization

// DLL info
const	int							USERNAMELEN				= 100;
const int							IDAC_NR_DIG_CHANNELS	= 8;
// number of scalings
const int							IDAC_DIGITAL_CHANNELCOUNT	= 8;
const int							ANALOGOUT_CHANNELCOUNT		= 2;

// ----- XV 12/11/2002 : Range of analog out channels in mV;
#define								IDAC_ANALOG_OUT_RANGE_LOW	 -10000
#define								IDAC_ANALOG_OUT_RANGE_HIGH	  10000

// number of scalings
const int							IDAC_DIGITAL_DECIMATIONCOUNT= 65535;
const int							IDAC_LOWPASSCOUNT			= 16;
const int							IDAC_HIGHPASSCOUNT			= 17;
const int							IDAC_DECIMATIONCOUNT		= 65535;
const int							MAX_DIGITAL_VALUE			= 2^IDAC_DIGITAL_CHANNELCOUNT;
const int							MAX_SYNC_WORD_PER_SECOND	= 10;

#define IDAC_SCALERANGECOUNT	6

// zeropulse length
const int							IDAC_ZEROPULSE_LENGTH	= 500;

// Max size to allocate for file
const int							MAXDOWNLOADFILESIZE		= 0x60000;

// Length of a box string
const int							BOXSTRINGLENGTH			= 32;
const int							PACKED_BOXSTRINGLENGTH	= (BOXSTRINGLENGTH - 1) / 8 + 1;

// Number of boxes available
const int							BOXCOUNT				= 1;

// Time after which we would want to see our USB ISO buffers filled
const int							IDAC_BUFFER_INTERVAL	= IDAC_TRANSFER_INTERVAL;

// Size of temp buffer for text
const int							BUFFERSIZE				= 2048;

// Size of driver buffer
//const int							THR_BUFBLK				= ISO_IN_ENDPOINT_SIZE;
//const int							THR_BUFCOUNT			= 200;
//const int							THR_BUFSIZE				= THR_BUFCOUNT * THR_BUFBLK;

// Board parameters
const int							IDAC_BUFFER_DELAY		= 200;

// Channels info
const	int							IDAC_CLUSTERSIZE		= 4;
const	int							IDAC_CLUSTERCOUNT		= 1;

#endif // IDACDRIVER4CONSTANTS_H
