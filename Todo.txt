BIG STUFF FOR FUTURE:
	Check out next:
	x	models for QTableView
	x	undo/redo
	x	add command to create/delete a wave
	x	have Project create dynamic table models which automatically add/remove rows
		MainWindow:
			docks:
			x	command log
			x	undo view
			x	script console
				item property viewer:
					list of items
					slider
					property browser
			menus:
				Edit: undo, redo
			central widget:
		Lists and sub-lists:
			ItemRepository:
				activate()
				addInactive()
				Items need to belong to an item list, which they send command requests to
		Property setting pathway:
			setProperty is called on an Item
			Item forwards the request to its ItemList
			ItemList forwards the reqest to 
			the item forwards the request through a GUI Workspace component
			Workspace asks Project to encode the command as a CommandData object
			Workspace wraps CommandData in a QUndoCommand
			
			Workspace (creates QUndoCommand objects)
				Project (maintains interconnected consistency)
					ItemRepository (keeps inactive items)
						ItemList (notifies about list and item changes)
							Item (create property commands)
								Data (hold actual data)
			
			CommandDataProperty {
				item
				sProperty
				vOld
				vNew
			}
			
			EdmObject* ExObject::findPath(cmd) {
				ExObject* obj = this;
				QObject* parent = this->parent();
				while (parent != NULL) {
					if (parent->isType(ExObject)) {
						cmd->path.push(obj);
						obj = parent;
					}
					parent = parent->parent();
				}
				return obj;
			}
			
			EdmObject::sendProperty(cmd) {
				findPath(cmd);
				obj->handleProperty(cmd);
				if (cmd->bDelete)
					delete cmd;
			}
			
			EdmObject::sendCommand(cmd) {
				findPath(cmd);
				obj->handleCommand(cmd);
				if (cmd->bDelete)
					delete cmd;
			}
			
			Item::handleCommand(cmd) {
			}
			
			Item::setProperty(...) {
				cmd = new CommandPropertyData(this, sProperty, vOld, vNew);
				m_setter
				if (m_list != NULL)
					m_list->postCommand(cmd);
				else
					handleCommand(cmd);
			}
			
			List::postCommand(CommandPropertyData* cmd) {
				if (m_repo != NULL) {
				}
			}
			
			CommandPropertyHandler::sendCommand(CommandPropertyData* cmd) {
				if (m_setter != NULL)
					m_setter->sendCommand(cmd);
				else
					handleCommand(cmd);
			}
			
			CommandPropertyHandler::handleCommand(CommandPropertyData* cmd) {
				cmd->item->itemData()->setProperty(...);
				emit propertyChanged(cmd->item->itemId(), cmd->sProperty);
			}
		Sample script session:
			project.loadSampleProject()
			
			wave = waves.add();
			wave.type = 1;
			wave.name = "One";
			wave.comment = "Yay";
			wave.toggleInvert();
			wave.shift += 10;
			
			clone = waves.cloneForTransaction(wave);
			clone.shift -= 20;
			clone.toggleInvert();
			waves.commit(clone);
			
			wave = waves.copy(wave);
			wave.name = "Two";
			
			waves.delete(wave);
		
		More separation thoughts:
			script interfaces: everything that can be changed by script should be logged
			Item: sends all modifications back to workspace as commands
			ItemList: sends all modifications back to workspace as commands
			Project: receives commands from the workspace, filters them, and forwards them to the ItemLists and Items
			Workspace: embeds commands into QUndoCommands
			
			exposed to script:
				project
					items
					item lists
						items
				ui
					the ui is an item itself
					child items
			
		separate Project into Project/ProjectData, where ProjectData holds the ItemLists.
		create model sorter and filterer
		create task views
			View Task:
				item selection (preferably multi-selection also possible)
				easy editing of common parameters
				it'd be nice to have mouse cursor feedback when moving over widgets
				
				QGraphicsView with custom layout of widgets
				custom widget with custom layout of widgets
				custom widget with custom layout and drawing of everything
				QTreeView
				derive from QAbstractItemView
		Separate QUndoStack and QUndoCommand from Project, because they are in the Gui module
		create ObjectPropertyMapper
		create GceadProject
		see how these views work out with an MVP framework?
		create GceadWorkspace, which holds all the data for the UI
		create task "presenters"
		use QSqlite for project file
		write all edits to a recovery file
		create an even more abstract Command class that is for both edits and non-edits, and save these so that we can get a more detailed log of the user's actions.
		tap into application event loop in order to log events
		catch exceptions so that log files can be flushed
		for python scripting, see http://doc.trolltech.com/qq/qq23-pythonqt.html
	Save all edits in a temporary file
	Crash recovery
	Allow user to easily move waves around among files
	OpenGL for graphs
	Touch-based UI
	Any good way to use a state machine?
------------

	Add support for Engineering Spirit drivers:
	x	recognize device
	x	initialize device
	x	record from device
	x	fix recording rate
	x	configure device
	x	shut down device when done
	x	test IDAC2 too
	x	test IDAC4 digital
		search for IDAC8_32.dll instead of shipping with it:
			http://en.wikipedia.org/wiki/Dynamic-link_library#C_and_C.2B.2B_2
	x	BUG: Digital settings: enabled and invert signals get lost after save and reload
	Fix IDAC4 Settings dialog:
	.	make it smaller?
	x	on Channel 2, the "Range" label is missing and it should be above the cutoff stuff
	x	hide general range setting if range can be set per channel
	x	put spacers on left and right sides of dialog
x	Test for correct voltage levels between IDAC2 and IDAC4
.	Create my own Autospike recordings for testing ASC import
		msex_test.asc EAD:
			-8390 to 1996 (height is 76% of 3 units ~= 4.6mV)
			f1 = 116.364313
			a1 = 10386
			r1 = a1/f1 = 89.254
		msex_test.asc FID:
			-3 to 10719 (height is 75% of 3 units)
		recording.asc EAD:
			min/max: -3083 to 417
			347 to -3009 = 3356 = 8.8mV
			f2 = 11.636431
			a2 = 3356
			r2 = a2/f2 = 288.40

	Import ASC file from Autospike
	?	ImportRecordDialog: add stretch widget to right sight
	?	ImportRecordDialog: add OK and Cancel buttons (in platform-dependent order?)
	?	ImportRecordDialog: fill in map
		fix conversion to voltage
		make sure FID is also being imported
	?	don't offer digital import
	Add libusbmac.mak

	create mac installable
	Screenshots for Peter's documentation
	more unit tests
	
	Model/View:
		EadFile:
			QUndoStack undoStack
			Commands:
				RecordingWavesCreate
				RecordingWavesKeep
				RecordingWavesDiscard
				WaveNameChange
				WaveVisibleToggle
				WaveSensitivityChange
				WaveOffsetChange
				WaveShiftChange
				WaveInvertToggle
				WaveCommentChange
			getWaveTableModel()
		WaveTableModel: QAbstractTableModel
			recId
			type
			name
			comments
			offset
			sensitivity
			shift
			visible[5] (for each view)
			pos[5] (for each view)
		ViewWaveTableModel: QAbstractTableModel
			(everything from WaveTableModel)
			category
			visible
		PropertyTableModel: QAbstractTableModel
			takes a list of QObjects and a list of property names
		ViewWaveListView: QAbstractItemView
			takes a ViewWaveTableModel and displays them
		FiltersScope: QAbstractTableModel
		-----------------------
		Other thoughts about separating data from display and control more thoroughly
		Think of the storable data in terms of database tables
		each column of each row emits a change signal
		when the column of a row changes, the row emits a columnChanged() signal
		rows know nothing about their tables or parent objects
		tables capture all columnChanged() signals and emit rowColumnChanged()
		------
		when a wave is added/removed to a filter, the display of that wave should be recalculated
		------
		Pure storage data tables:
		Project (settings, comment, pver, rver, wver)
		Waves (waveId*, recId, waveType, name, comment, offset, sensitivity, shift)
		Views (viewId*)
		ViewWaves (viewId + waveId*, visible, pos)
		Filters (filterId*, filterType, waveType)
		FilterWaves (filterId + waveId*)
		Filter1s (filter1 settings)
		
	
	Question for Peter:
		should I drop "min" unit from time when the unit is minutes?
		is the thicker tick what you had in mind?
	
	Digital wave recording:
		only record digital wave when it's enabled!
		when digital wave is disabled, should the display be different in the dialog?
	BUG: on Windows; start recording; close program; select discard twice; shouldn't crash
	BUG (maybe): record a wave; Ave view; zoom in on EAD AVE wave; Stop and Save; reopen file; EAD Ave wave might not have kept its sensitivity
	website: copy image and css files from vivia-video website
	Ian's suggestion about timebase (make it obvious that timebase refers to grid width)
	improve selecting region for zoom-in so that zoom factor isn't so large sometimes
	mac: get isochronous transfer to work for IDAC4 (try libusb-1.1 when it comes out)
	import of old EAG files
	x	EAD wave
	x	FID wave
		scaling factors
		comments
	Think about merging recording from another EAD file
	?	import all records from another EAD file
		test importing from both GcEad/2010 and the old EAD program
		but: also need to let user delete waves then?
	Create unit tests
	x	load sample project
	x	charts
	x	zooming
	x	scrolling
	x	edit/show wave comments
	.	peaks
			show time
			show percentage
			show amplitude
			enter and leave markers mode
	x	hiding/unhiding waves
	x	adding/removing extra waves from charts
	x	inverting a wave
	.	save/load
			wave comment with XML special characters
			file comment with XML special characters
			BUG: in Chart:All, EAG Ave doesn't remain hidden
		importing from both GcEad/2010 and the old EAD program
		publishing
		recording
			recording label shown when recording starts
			recording label updates during recording (RECORDING & REMAINING)
			recording label hidden after recording done
			chart updates during recording
			proper scrolling as recording goes off current visible region
		loading/saving settings
			show peak percent vs amplitude
	add attributes to root node of EAD file:
		pver: program version which wrote this file
		wver: version of xml format which was written (integer)
		rver: minimum version of the xml format reader which can read this XML
		display some message to user if trying to open/save an older XML version
		display some message to user if trying to open/save a newer XML version
	Improve handling of IDAC overflow
	Run unit tests in GUI
		separate View and ViewMain
		create ViewTest
		run with valgrind
	Create new installer for Windows
		build EXE in Windows
		update version number too

Windows 7 x64 USB:
	http://www.jungo.com/st/wdusb.html#
	http://www.thesycon.de/eng/usbio.shtml
	Could WinUSB be used with IDAC2, or does the reset requirement (see IdacDriverUsb::sendFirmware) prevent this?
	Could IDAC4 firmware be re-written to not use isochronous transfer, so that WinUSB could be used?
	Could IDAC firmware be rewritten to implement a "Communication Class", in particular "Asynchronous Transfer Mode", and then use the standard Windows driver?

BEFORE A RELEASE:

	INSTALLER:
	IDAC2
	?	IdacDriver2: get inverted status correct
		handle 0x7ffe (or whatever the reset code is)? (only if I can look at the original code which generated/handled 0x7ffe)
		get symbolic codes for the IDAC2
	TEST:
		test that voltage conversions are done right
		test that digital stimulus channel works on IDAC2
		is the decimation value really right for IDAC2?
		run through a couple use-cases
	FOR PETER:
		IDAC2: same signal on INPUT 2 reads about 10x smaller than on INPUT 1...
		IDAC2: when I set ext amp=1, signal on INPUT 1 is *2mV* peak to peak
		IDAC4: when I set ext amp=10, signal on INPUT 1 is *1mV* peak to peak


	CLEANUP:
	x	remove/reduce compiler warnings
	x	suppress debug output in release mode
	x	svn:eol-style=native on all relevant files
	x	copyright notices in all files
	x	svn:ignore relevant directories/files
	x	set proper app version number
		update webpages:
			rsync -aiv [files] whiteh12,gcead@web.sourceforge.net:htdocs/
	
	testing
		Verify that all menu actions are connected
		Run program through valgrind
	user documentation
	programmer documentation
	open-source it
		upload EXEs to sourceforge

FUTURE STUFF suggested by Peter:
	Import .aspk files (along with dialog to select which waves) (see Aspkdoc.cpp, CAutoSpkDoc::Serialize)
	Add band-pass filter from EAD program

FUTURE STUFF:
	Store log files in a user directory instead of in program directory?
	for recordings with digital waves, could we try to autodetect EAD peaks?
	add programmer documentation to IdacDriver* projects
	Markers Edit; click Add; move marker; remove marker: autodetect of peak should be re-added?
	BUG: Load Sample Project, edit it, Save As over an existing file: should ask for overwrite confirmation!  Appears to be a Qt or KDE bug, because other applications have the same problem, and I think it might have worked correctly in windows -- 2010-05-05.
	integrate RecordHandler into Idac/ or IdacDriver/ (and delete RecordHandler)
	EadFile: redraw graph when filters change
	ChartWidget: antialias the marker lines in Publish mode
	ChartWidget: vertical "crosshair" line
	ChartWidget: When changing number of horizontal divisions in Publish task, move the scrollbar appropriately
	ChartWidget: When the user first presses Ctrl, update the mouse cursor if appropriate (i.e., about to set a peak)
	ChartWidget: Don't let user zoom in on an empty document using mouse dragging
	ChartWidget: when dragging markers, marker snaps to mouse-x instead of dragging smoothly
	EadFile: returned more detailed information when load/save fail (and show it to user)
	Globals: set whether File or Print output was last selected (variables already exist in PublisherSettings, and they are loaded and saved in Globals)
	MainScope: only enable m_actions->fileExportRetentionData when the user has set/verified peaks
	MainScope: add undo/redo
	MainWindow: when right-click on toolbar, don't give option to hide it
	MainWindow: Beep when done recording?
	PanelTabs: consider choosing equal widths for tabs, if space allows
	PanelTabs: draw shadow around active tab?
	RecordDialog: when trigger comes, somehow start saving data on EXACTLY the sample where the trigger occurred, rather than waiting for the next data block
	RecordSettingsDialog: add +- sign to range values?
	RecordSettingsDialog: right-align the comboboxes (http://www.qtforum.org/article/20839/text-alignment-in-qcombobox.html)
	SweepWidget: when signal is out of range, make it visible somehow (limit to viewport?)
	TaskPublishWidget: add btnResetColors
	TaskPublishWidget: when printing the time of a recording, only print hour and minute (not seconds), but keep it localized!
	TaskPublishWidget: save user-title to EadFile
	TaskPublishWidget: pen width for signals (Peter's request)
	TaskPublishWidget: color of signals (Peter's request)
	TaskPublishWidget: when printing in black/white, need to make peak labels b/w too
	TaskPublishWidget: Qt BUG: SVG painting doesn't clip signals above and below the viewbox properly
	TaskReviewWidget: in Recording view, let user select any EAD/FID wave he wants (not just the averages)
	TaskReviewWidget: allow adding comments to average waves
	WaveEditorWidget: add a [Delete] command
	WaveEditorWidget: add a wave color?
	WaveEditorWidget: let user edit name

	REFACTOR: Remove enum EadMarkerMode?
	Refactor: ChartPixmap: remove knowledge of the current EadTask (perform task-specific logic via other variables)
	Refactor: ChartScope: remove knowledge of the current EadTask (perform task-specific logic via other variables)
	Refactor: MainScope: move File|Open Recent from MainWindow to MainScope
	Refactor: Task*Scope: create scope classes for the Task widgets too
	Refactor: Rename widgets for the right side: View*Widget
	Refactor: only call Globals->file()->updateAveWaves() from ViewInfo?
	Refactor: WaveInfo: vwiUser is a HACK, see if we can improve this
	Refactor: TaskReviewWidget: figure out a way to use WaveEditorWidget instead of painting everything ourselves, but still maintain smooth drawing

Link for info about writing a MatLab plugin
	www.mathworks.com/access/helpdesk/help/pdf_doc/daq/adaptorkit.pdf

FILE FORMAT FROM OLD EAD PROGRAM (EXAMPLE1.EAD):
	04E2: BcDataSet<CR><NL><6F><BF><02><00>
	04F2: <9F><0F><00><00>: size
	04F6: EAD data start
	4372: EAD data end, then FID stuff
	      <42><43><02><00>... (11 bytes)
	437D: <9F><0F><00><00>: size
	81FD: FID data end
	0x02BF = 703
	0x0002BF6F = 180079
	81FD: 


